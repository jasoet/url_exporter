version: '3'

vars:
  BINARY_NAME: url-exporter
  BUILD_DIR: ./dist
  DOCKER_IMAGE: url-exporter
  VERSION: latest

tasks:
  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Create build directory
  ensure-build-dir:
    internal: true
    silent: true
    cmds:
      - mkdir -p {{.BUILD_DIR}}

  # Install development tools
  install-tools:
    desc: Install additional tools required for development and build
    silent: true
    cmds:
      - |
        echo "Installing goreleaser..."
        if ! command -v goreleaser &> /dev/null; then
          go install github.com/goreleaser/goreleaser/v2@latest
        else
          echo "goreleaser already installed"
        fi
      - |
        echo "Installing golangci-lint..."
        if ! command -v golangci-lint &> /dev/null; then
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        else
          echo "golangci-lint already installed"
        fi

  # Download dependencies
  deps:
    desc: Download Go module dependencies
    silent: true
    cmds:
      - go mod download
      - go mod tidy

  # Build the application (direct binary build)
  build:
    desc: Build the application binary directly (single platform)
    deps: [ ensure-build-dir ]
    cmds:
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} -v .
      - cp -f configs/config.example.yaml {{.BUILD_DIR}}/config.example.yaml
    generates:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  # Build using goreleaser (multi-platform)
  build-all:
    desc: Build for all platforms using goreleaser
    cmds:
      - goreleaser build --snapshot --clean

  # Run tests with race detection and coverage
  test:
    desc: Run all tests with race detection and coverage report
    deps: [ ensure-build-dir ]
    cmds:
      - go test -race -coverprofile={{.BUILD_DIR}}/coverage.out -v ./...
      - go tool cover -html={{.BUILD_DIR}}/coverage.out -o {{.BUILD_DIR}}/coverage.html
    generates:
      - '{{.BUILD_DIR}}/coverage.out'
      - '{{.BUILD_DIR}}/coverage.html'

  # Format code
  fmt:
    desc: Format Go code
    silent: true
    cmds:
      - gofmt -s -w .

  # Vet code
  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  # Lint code (requires golangci-lint)
  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run

  # Run all code quality checks
  quality:
    desc: Run all code quality checks
    deps: [ fmt, vet, lint ]

  # Run the application locally
  run:
    desc: Run the application with example config
    deps: [ build ]
    env:
      URL_CONFIG_FILE: '{{.BUILD_DIR}}/config.example.yaml'
      URL_LOGLEVEL: "debug"
      URL_CHECKINTERVAL: "20s"
    cmds:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  # Run with environment variables
  run-env:
    desc: Run with environment variables
    deps: [ build ]
    env:
      URL_TARGETS: "https://example.com,https://google.com"
      URL_LOGLEVEL: "debug"
      URL_CHECKINTERVAL: "20s"
    cmds:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  # Build Docker image
  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:{{.VERSION}} .

  # Run Docker container
  docker-run:
    desc: Run Docker container
    deps: [ docker-build ]
    cmds:
      - |
        docker run -p 8412:8412 \
          -e URL_TARGETS="https://example.com,https://google.com" \
          -e URL_LOG_LEVEL="info" \
          {{.DOCKER_IMAGE}}:{{.VERSION}}

  # Install binary to GOPATH/bin
  install:
    desc: Install binary to GOPATH/bin
    deps: [ build ]
    silent: true
    cmds:
      - cp {{.BUILD_DIR}}/{{.BINARY_NAME}} $(go env GOPATH)/bin/

  # Clean build artifacts
  clean:
    desc: Clean build artifacts and temporary files
    silent: true
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - go clean

  # Initial project setup
  setup:
    desc: Initial project setup (install tools and dependencies)
    deps: [ install-tools, deps ]

  # Development workflow
  dev:
    desc: Full development cycle (install-tools, deps, quality, test, build)
    deps: [ install-tools, deps, quality, test, build ]

  # CI/CD pipeline simulation
  ci:
    desc: Simulate CI/CD pipeline
    deps: [ deps, fmt, vet, lint, test, build ]

  # Release build using goreleaser (CI/CD only)
  release:
    desc: Create release using goreleaser (requires GitHub environment variables)
    cmds:
      - goreleaser release --clean

  # Release snapshot (for testing)
  release-snapshot:
    desc: Create snapshot release using goreleaser
    env:
      GITHUB_REPOSITORY_OWNER: jasoet
      GITHUB_REPOSITORY_NAME: url_exporter
      IMAGE_NAME: url-exporter
      GITHUB_REPOSITORY: jasoet/url_exporter
    cmds:
      - goreleaser release --snapshot --clean