version: '3'

vars:
  BINARY_NAME: url-exporter
  BINARY_PATH: ./app
  BUILD_DIR: ./dist
  DOCKER_IMAGE: url-exporter
  VERSION: latest

tasks:
  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Create build directory
  ensure-build-dir:
    internal: true
    cmds:
      - mkdir -p {{.BUILD_DIR}}

  # Download dependencies
  deps:
    desc: Download Go module dependencies
    cmds:
      - go mod download
      - go mod tidy

  # Build the application (direct binary build)
  build:
    desc: Build the application binary directly (single platform)
    deps: [ensure-build-dir]
    cmds:
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} -v {{.BINARY_PATH}}
    generates:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  # Build using goreleaser (multi-platform)
  build-all:
    desc: Build for all platforms using goreleaser
    cmds:
      - goreleaser build --snapshot --clean

  # Run tests with race detection and coverage
  test:
    desc: Run all tests with race detection and coverage report
    cmds:
      - go test -race -coverprofile=coverage.out -v ./...
      - go tool cover -html=coverage.out -o coverage.html
    generates:
      - coverage.out
      - coverage.html

  # Format code
  fmt:
    desc: Format Go code
    cmds:
      - gofmt -s -w .

  # Vet code
  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  # Lint code (requires golangci-lint)
  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run

  # Run all code quality checks
  quality:
    desc: Run all code quality checks
    deps: [fmt, vet, lint]

  # Run the application locally
  run:
    desc: Run the application with example config
    deps: [build]
    cmds:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}} --config=configs/config.example.yaml'

  # Run with environment variables
  run-env:
    desc: Run with environment variables
    deps: [build]
    env:
      URL_TARGETS: "https://example.com,https://google.com"
      URL_LOG_LEVEL: "debug"
    cmds:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  # Build Docker image
  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:{{.VERSION}} .

  # Run Docker container
  docker-run:
    desc: Run Docker container
    deps: [docker-build]
    cmds:
      - |
        docker run -p 8412:8412 \
          -e URL_TARGETS="https://example.com,https://google.com" \
          -e URL_LOG_LEVEL="info" \
          {{.DOCKER_IMAGE}}:{{.VERSION}}

  # Install binary to GOPATH/bin
  install:
    desc: Install binary to GOPATH/bin
    deps: [build]
    cmds:
      - cp {{.BUILD_DIR}}/{{.BINARY_NAME}} $(go env GOPATH)/bin/

  # Clean build artifacts
  clean:
    desc: Clean build artifacts and temporary files
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -f coverage.out coverage.html
      - go clean

  # Development workflow
  dev:
    desc: Full development cycle (deps, quality, test, build)
    deps: [deps, quality, test, build]

  # CI/CD pipeline simulation
  ci:
    desc: Simulate CI/CD pipeline
    deps: [deps, fmt, vet, lint, test, build]

  # Release build using goreleaser
  release:
    desc: Create release using goreleaser
    cmds:
      - goreleaser release --clean

  # Release snapshot (for testing)
  release-snapshot:
    desc: Create snapshot release using goreleaser
    cmds:
      - goreleaser release --snapshot --clean