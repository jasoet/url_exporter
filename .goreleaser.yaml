project_name: url-exporter

before:
  hooks:
    - go mod tidy
    - go mod vendor

builds:
  - id: url-exporter
    main: .
    binary: url-exporter
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.ShortCommit}}
      - -X main.date={{.Date}}
      - -X main.builtBy=goreleaser

checksum:
  name_template: 'checksums.txt'
  algorithm: sha256

snapshot:
  name_template: "{{ incpatch .Version }}-snapshot"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^ci:"
      - "^chore:"
      - "merge conflict"
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
  groups:
    - title: 'New Features'
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+'
      order: 0
    - title: 'Security Updates'
      regexp: '^.*?sec(\([[:word:]]+\))??!?:.+'
      order: 1
    - title: 'Bug Fixes'
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+'
      order: 2
    - title: 'Performance Improvements'
      regexp: '^.*?perf(\([[:word:]]+\))??!?:.+'
      order: 3
    - title: 'Refactors'
      regexp: '^.*?refactor(\([[:word:]]+\))??!?:.+'
      order: 4
    - title: 'Documentation'
      regexp: '^.*?docs(\([[:word:]]+\))??!?:.+'
      order: 5
    - title: 'Other'
      order: 999

archives:
  - id: default
    name_template: '{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}'
    format: zip
    files:
      - src: internal/config/config.default.yml
        dst: config.yml
      - src: configs/config.example.yaml
        dst: config.example.yaml
      - README.md
      - LICENSE*

dockers:
  - image_templates:
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY_OWNER }}/{{ .Env.IMAGE_NAME }}:{{ .Version }}"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY_OWNER }}/{{ .Env.IMAGE_NAME }}:latest"
    dockerfile: Dockerfile
    use: buildx
    build_flag_templates:
      - "--platform=linux/amd64"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--label=org.opencontainers.image.source={{.GitURL}}"
      - "--build-arg=VERSION={{.Version}}"

release:
  github:
    owner: "{{ .Env.GITHUB_REPOSITORY_OWNER }}"
    name: "{{ .Env.GITHUB_REPOSITORY_NAME }}"
  draft: false
  prerelease: auto
  mode: replace
  header: |
    ## URL Exporter {{ .Tag }}

    ### Prometheus URL Availability Monitoring

    This release includes improvements to the Go-based Prometheus exporter that monitors URL availability and exposes metrics for infrastructure health monitoring across multiple network locations.

    ### Installation

    ```bash
    # Download the appropriate binary for your system
    # Extract and place in your PATH
    chmod +x url-exporter
    ./url-exporter
    ```

    ### Quick Start

    ```bash
    # Using environment variables
    export URL_TARGETS="https://example.com,https://google.com"
    ./url-exporter

    # Using config file
    cp config.example.yaml config.yaml
    ./url-exporter
    ```

  footer: |
    ### Key Features

    - üîç **URL Health Monitoring** - HTTP HEAD requests for efficient checking
    - üìä **Comprehensive Prometheus Metrics** - 6 metrics (4 gauges + 2 counters) for detailed monitoring
    - üåê **Multi-location Support** - Instance identification for distributed monitoring
    - ‚ö° **Concurrent Checking** - High-performance concurrent URL validation
    - üê≥ **Docker Support** - Ready-to-use container images
    - üìà **Configurable Intervals** - Customizable check intervals and timeouts

    ### Metrics Exposed

    **Gauge Metrics** (labels: `url`, `host`, `path`, `instance`):
    - `url_up` - URL availability (1 if URL returns 2xx status, 0 otherwise)
    - `url_error` - Network/connection error indicator (1 if error, 0 otherwise)
    - `url_response_time_milliseconds` - Response time in milliseconds (only when no error)
    - `url_http_status_code` - HTTP status code returned (only when no error)

    **Counter Metrics** (labels: `url`, `host`, `path`, `status_code`, `instance`):
    - `url_check_total` - Total number of checks performed by status code
    - `url_status_code_total` - Counter for each specific HTTP status code encountered

    **Full documentation available in [CLAUDE.md](https://github.com/{{ .Env.GITHUB_REPOSITORY }}/blob/main/CLAUDE.md)**

dist: dist