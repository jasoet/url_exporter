# GitHub Actions workflow for versioning, building binaries, and publishing Docker images
name: Build, Release, and Publish

# Trigger the workflow on push to main branch, tag creation, or manual trigger
on:
  push:
    branches:
      - main
  create:
    tags:
      - 'v*'  # Only trigger on tag creation with v prefix
  workflow_dispatch:  # Add manual trigger

# Environment variables used across the workflow
env:
  # Name of the image to be published
  IMAGE_NAME: url-exporter
  # Node.js version for semantic-release
  NODE_VERSION: 20
  # Go version for GoReleaser
  GO_VERSION: 1.24

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Step 2: Setup Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Step 3: Install Task
      - name: Install Task
        run: |
          curl -sL https://github.com/go-task/task/releases/latest/download/task_linux_amd64.tar.gz | tar -xz -C /tmp
          sudo mv /tmp/task /usr/local/bin/task
          task --version

      # Step 4: Run tests
      - name: Run tests
        run: task test

      # Step 5: Run linter
      - name: Run linter
        run: task lint

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test
    # Only run on push to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Set permissions needed for creating releases and pushing tags
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      # Step 1: Checkout the repository code with full history for correct versioning
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Setup Node.js for semantic-release
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Step 3: Install dependencies from package.json and update lock file
      - name: Install dependencies
        run: npm install

      # Step 4: Run semantic-release to determine version and create release
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  goreleaser-auto:
    name: Build and Publish Automated Release
    runs-on: ubuntu-latest
    needs: semantic-release
    # Run ONLY if a new release was published by semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'

    # Set permissions needed for creating releases and pushing to GHCR
    permissions:
      contents: write
      packages: write

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Checkout the tag created by semantic-release (which points to the changelog commit)
          ref: ${{ format('v{0}', needs.semantic-release.outputs.new_release_version) }}

      # Step 2: Setup Go for GoReleaser
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Step 3: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Login to GitHub Container Registry using GITHUB_TOKEN
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Set repository environment variables for GoReleaser
      - name: Set repository environment variables
        run: |
          echo "GITHUB_REPOSITORY_OWNER=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      # Step 6: Run GoReleaser to build binaries, create GitHub release, and build Docker images
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.semantic-release.outputs.new_release_version }}

  goreleaser-manual:
    name: Build and Publish Manual Release
    runs-on: ubuntu-latest
    needs: test
    # Run ONLY on tag creation events (not on push to main)
    if: github.event_name == 'create' && github.event.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')

    # Set permissions needed for creating releases and pushing to GHCR
    permissions:
      contents: write
      packages: write

    steps:
      # Step 1: Checkout the repository code at the tag
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # The tag is already checked out in this event

      # Step 2: Setup Go for GoReleaser
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Step 3: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Login to GitHub Container Registry using GITHUB_TOKEN
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Set repository environment variables for GoReleaser
      - name: Set repository environment variables
        run: |
          echo "GITHUB_REPOSITORY_OWNER=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          # Extract version from tag (remove 'v' prefix)
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # Step 6: Run GoReleaser to build binaries, create GitHub release, and build Docker images
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}